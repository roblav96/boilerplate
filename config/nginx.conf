# 

worker_processes auto;
worker_rlimit_nofile 2048;

events {
	worker_connections 1024;
}

http {
	
	include mime.types;
	default_type application/octet-stream;
	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	types_hash_max_size 2048;
	
	gzip on;
	gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript application/x-font-ttf font/opentype image/svg+xml image/x-icon;
	gzip_disable 'msie6';
	gzip_vary on;
	gzip_proxied any;
	gzip_comp_level 5;
	gzip_buffers 16 8k;
	gzip_http_version 1.1;
	
	client_body_buffer_size 16K;
	client_header_buffer_size 1k;
	large_client_header_buffers 2 1k;
	client_max_body_size 8m;
	
	client_body_timeout 12;
	client_header_timeout 12;
	send_timeout 8;
	
	keepalive_timeout 60;
	
	# increases performance, nodejs logs requests
	rewrite_log off;
	access_log off;
	error_log off;
	
	
	
	# ████  ________  ████
	
	upstream api_upstream {
		# ip hashing is required to cluster WebSocket connections
		hash $remote_addr;
		server localhost:12100;
		server localhost:12101;
		server localhost:12102;
		server localhost:12103;
		server localhost:12104;
		server localhost:12105;
		server localhost:12106;
		server localhost:12107;
		# extend this to the number of forked processes in your cluster
	}
	
	server {
		listen 80;
		server_name dev.________;
		
		# serve webpack-dev-server static files
		location / {
			proxy_set_header Host 'localhost';
			proxy_pass http://localhost:8080;
		}
		# patch webpack-dev-server hot-reloading
		location /sockjs-node/ {
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection 'upgrade';
			proxy_pass http://localhost:8080;
		}
		
		location /api {
			proxy_http_version 1.1;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Real-Port $remote_port;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header X-Forwarded-Proto $scheme;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection 'upgrade';
			proxy_set_header Host $host;
			proxy_set_header Hostname $hostname;
			proxy_cache_bypass $http_upgrade;
			proxy_pass http://api_upstream;
		}
		
	}
	
	
	
}


